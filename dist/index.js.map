{"version":3,"sources":["../lib/index.ts","../lib/converters.ts","../lib/function-field.ts","../lib/invokable-function.ts","../lib/functioneer.ts"],"sourcesContent":["export * from \"./converters\";\r\nexport * from \"./function-field\";\r\nexport * from \"./invokable-function\";\r\nexport * from \"./interfaces\";\r\nexport * from \"./functioneer\";\r\n","/**\r\n * Convert a Uint8Array to a base64 encoded string\r\n * @param input The Uint8Array\r\n * @returns\r\n */\r\nexport function anyUint8ArrayToBase64(\r\n  input: Object | Uint8Array | unknown\r\n): string | unknown {\r\n  if (input instanceof Uint8Array) {\r\n    return Uint8ArrayToBase64(input);\r\n  }\r\n  if (input instanceof Object) {\r\n    const output = [];\r\n    Object.keys(input).forEach((key) => {\r\n      output[key] = anyUint8ArrayToBase64(input[key]);\r\n    });\r\n    return output;\r\n  }\r\n  return input;\r\n}\r\n\r\n/**\r\n * Convert a numberic string to a number\r\n * @param str The numeric string\r\n * @returns number\r\n */\r\nexport function stringToNumber(str: string): number {\r\n  return parseInt(str);\r\n}\r\n/**\r\n * Convert a boolean (\"true\",\"false\" case insensitive) string to a boolean\r\n * @param str The boolean string\r\n * @returns boolean\r\n */\r\nexport function stringToBoolean(str: string): boolean {\r\n  return str.toLowerCase() === \"true\";\r\n}\r\n/**\r\n * Convert a JSON string array \"[1,2,3,\"hello\",4]\" to an array\r\n * @param str The JSON string array\r\n * @returns The array\r\n */\r\nexport function stringToArray(str: string): any[] {\r\n  return JSON.parse(str);\r\n}\r\n/**\r\n * Convert an array [1,2,3,\"test\"] to a JSON string\r\n * @param arr The array\r\n * @returns The JSON string\r\n */\r\nexport function arrayToString(arr: any[]): string {\r\n  return JSON.stringify(arr);\r\n}\r\n/**\r\n * Convert a Uint8Array to a base64 encoded string\r\n * @param bytes The Uint8Array\r\n * @returns\r\n */\r\nexport function Uint8ArrayToBase64(bytes: Uint8Array): string {\r\n  let binary = \"\";\r\n  const len = bytes.byteLength;\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i]);\r\n  }\r\n  return btoa(binary);\r\n}\r\n\r\n/**\r\n * Convert a base64 encoded string to a Uint8Array\r\n * @param base64\r\n * @returns\r\n */\r\nexport function base64ToUint8Array(base64: string): Uint8Array {\r\n  const binary_string = atob(base64);\r\n  const len = binary_string.length;\r\n  const bytes = new Uint8Array(len);\r\n  for (let i = 0; i < len; i++) {\r\n    bytes[i] = binary_string.charCodeAt(i);\r\n  }\r\n  return bytes;\r\n}\r\n","import {\r\n  base64ToUint8Array,\r\n  stringToArray,\r\n  stringToBoolean,\r\n  stringToNumber,\r\n} from \"./converters\";\r\nimport { ValidationField } from \"./interfaces\";\r\n\r\n/***\r\n * A field in a function\r\n */\r\nexport class FunctionField {\r\n  private name: string;\r\n  private type: ValidationField;\r\n  private description: string | undefined;\r\n  private validation:\r\n    | ((fieldValue: string) => boolean | undefined)\r\n    | ((fieldValue: string) => Promise<boolean | undefined>)\r\n    | undefined;\r\n  constructor(\r\n    name: string,\r\n    type: ValidationField,\r\n    description: string | undefined,\r\n    validation:\r\n      | ((fieldValue: string) => boolean)\r\n      | ((fieldValue: string) => Promise<boolean>)\r\n      | undefined\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.description = description;\r\n    this.validation = validation;\r\n  }\r\n  /**\r\n   * Gets the field description for showing in help\r\n   * @returns\r\n   */\r\n  public getDescription() {\r\n    return this.description;\r\n  }\r\n  /**\r\n   * Gets the field name for showing in help\r\n   */\r\n  public getName() {\r\n    return this.name;\r\n  }\r\n  /**\r\n   * Gets the field type for showing in help\r\n   */\r\n  public getType() {\r\n    return this.type;\r\n  }\r\n  /**\r\n   * Converts the field to the expected type\r\n   * @param fieldValue The field value\r\n   * @throws Error if the field value is invalid and cannot be converted\r\n   * @returns the converted value\r\n   */\r\n  public convert(fieldValue: string): any {\r\n    if (this.type == \"string\") {\r\n      return fieldValue + \"\";\r\n    }\r\n    if (this.type == \"number\") {\r\n      return stringToNumber(fieldValue);\r\n    }\r\n    if (this.type == \"boolean\") {\r\n      return stringToBoolean(fieldValue);\r\n    }\r\n    if (this.type == \"array\") {\r\n      return stringToArray(fieldValue);\r\n    }\r\n    if (this.type == \"base64UInt8Array\") {\r\n      return base64ToUint8Array(fieldValue);\r\n    }\r\n    throw \"Invalid field type \" + this.type + \" for field \" + this.name;\r\n  }\r\n\r\n  /**\r\n   * Validates the field value\r\n   * @param fieldValue The value to validate\r\n   * @returns Promis<Boolean>\r\n   */\r\n  public async validate(fieldValue: string): Promise<boolean> {\r\n    if (this.type == \"string\") {\r\n      if (fieldValue.length <= 0)\r\n        throw \"Invalid string length for field \" + this.name;\r\n      return true;\r\n    }\r\n    if (this.type == \"number\") {\r\n      if (isNaN(parseInt(fieldValue))) {\r\n        throw \"Invalid number for field \" + this.name;\r\n      }\r\n      return true;\r\n    }\r\n    if (this.type == \"boolean\") {\r\n      if (fieldValue != \"true\" && fieldValue != \"false\") {\r\n        throw \"Invalid boolean for field \" + this.name;\r\n      }\r\n      return true;\r\n    }\r\n    if (this.type == \"array\") {\r\n      try {\r\n        if (\r\n          !(\r\n            Array.isArray(JSON.parse(fieldValue)) &&\r\n            JSON.parse(fieldValue).length > 0\r\n          )\r\n        ) {\r\n          throw \"Invalid JSON array for field \" + this.name;\r\n        }\r\n      } catch (e) {\r\n        throw \"Invalid JSON array for field \" + this.name;\r\n      }\r\n      return true;\r\n    }\r\n    if (this.type == \"base64UInt8Array\") {\r\n      const str = fieldValue + \"\";\r\n      const notBase64 = /[^A-Z0-9+\\/=]/i;\r\n      const len = str.length;\r\n      if (!len || len % 4 !== 0 || notBase64.test(str)) {\r\n        throw \"Invalid base64 string for field \" + this.name;\r\n      }\r\n      const firstPaddingChar = str.indexOf(\"=\");\r\n      if (\r\n        firstPaddingChar === -1 ||\r\n        firstPaddingChar === len - 1 ||\r\n        (firstPaddingChar === len - 2 && str[len - 1] === \"=\")\r\n      ) {\r\n        return true;\r\n      }\r\n      throw \"Invalid base64 string for field \" + this.name;\r\n    }\r\n    if (this.type == \"custom\") {\r\n      if (this.validation == undefined) {\r\n        throw \"Custom validation is undefined for field \" + this.name;\r\n      }\r\n      const validationResult = await this.validation(fieldValue);\r\n      if (validationResult === false) {\r\n        throw \"Custom validation failed for field \" + this.name;\r\n      }\r\n      return true;\r\n    }\r\n    throw \"Invalid field type \" + this.type + \" for field \" + this.name;\r\n  }\r\n}\r\n","import { FunctionField } from \"./function-field\";\r\nimport { ValidationField } from \"./interfaces\";\r\n\r\n/**\r\n * An invokable function for use in the function runner\r\n */\r\nexport class InvokableFunction {\r\n  private fields: FunctionField[] = [];\r\n  private callback: Function;\r\n  private log: Function;\r\n  constructor(callback: Function, log: Function) {\r\n    this.callback = callback;\r\n    this.log = log;\r\n  }\r\n\r\n  /**\r\n   * Validate the argument passed to the function\r\n   * @param args The arguments to validate\r\n   * @throws Error if the arguments are invalid\r\n   * @returns true if the arguments are valid\r\n   */\r\n  public async validate(args: any[]) {\r\n    if (this.fields.length != args.length) {\r\n      throw `Invalid number of arguments. Expected \r\n        ${this.fields.length} but got ${args.length}`;\r\n    }\r\n    for (let i = 0; i < args.length; i++) {\r\n      if ((await this.fields[i].validate(args[i])) === false) {\r\n        throw `Invalid argument value. Argument \r\n          ${this.fields[\r\n            i\r\n          ].getName()} at index ${i} did not pass validation for type ${this.fields[\r\n          i\r\n        ].getType()}`;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Convert the arguments to the expected types\r\n   * @param args The arguments to convert\r\n   * @returns true if the arguments are valid\r\n   */\r\n  private convertArgs(args: any[]) {\r\n    const convertedArgs = [];\r\n    for (let i = 0; i < args.length; i++) {\r\n      convertedArgs[i] = this.fields[i].convert(args[i]);\r\n      this.log(`  â”œ Converted \"${args[i]}\" to ${convertedArgs[i]}`);\r\n    }\r\n    return convertedArgs;\r\n  }\r\n\r\n  /**\r\n   * Runs the function and get the execution result\r\n   * @param args The arguments to run the function with\r\n   * @returns The function result\r\n   */\r\n  public async run(args: any[]) {\r\n    await this.validate(args);\r\n    return await this.callback.apply(this, this.convertArgs(args));\r\n  }\r\n\r\n  /**\r\n   * Add a field to the function\r\n   * @param name The field name\r\n   * @param type The field type\r\n   * @param description The field description (shown in help)\r\n   * @param validation The field validation function\r\n   * @returns this instance of InvokableFunction\r\n   */\r\n  public addField(\r\n    name: string,\r\n    type: ValidationField,\r\n    description: string,\r\n    validation:\r\n      | ((fieldValue: string) => boolean)\r\n      | ((fieldValue: string) => Promise<boolean>)\r\n      | undefined = undefined\r\n  ) {\r\n    this.fields.push(new FunctionField(name, type, description, validation));\r\n    return this;\r\n  }\r\n  /**\r\n   * Add a field to the function\r\n   * @param field The field (and validation) to add\r\n   * @returns  this instance of InvokableFunction\r\n   */\r\n  public addFunctionField(field: FunctionField) {\r\n    this.fields.push(field);\r\n    return this;\r\n  }\r\n  /**\r\n   * Set the fields for the function\r\n   * @param fields The fields to set\r\n   */\r\n  public setFields(fields: FunctionField[]) {\r\n    this.fields = [...fields];\r\n  }\r\n  /**\r\n   * Get the fields for the function\r\n   * @returns The fields\r\n   */\r\n  public getFields() {\r\n    return this.fields;\r\n  }\r\n  /**\r\n   * Get a field by index\r\n   * @param index\r\n   * @returns\r\n   */\r\n  public getFieldByIndex(index: number) {\r\n    return this.fields[index];\r\n  }\r\n}\r\n","import { anyUint8ArrayToBase64 } from \"./converters\";\r\nimport { FunctionField } from \"./function-field\";\r\nimport {\r\n  FunctionObjectCall,\r\n  FunctionRunnerOptions,\r\n  FunctionRunResult,\r\n} from \"./interfaces\";\r\nimport { InvokableFunction } from \"./invokable-function\";\r\n\r\n/***\r\n * Main Functioneer class for running functions\r\n */\r\nexport class Functioneer {\r\n  /**\r\n   * The default options for the function runner\r\n   */\r\n  public options: FunctionRunnerOptions = {\r\n    /**\r\n     * If true, logs info  to console\r\n     */\r\n    debug: false,\r\n    /**\r\n     * If true, returns JSON instead of string\r\n     */\r\n    returnJSONString: true,\r\n    /**\r\n     * If true, automatically shows help on error\r\n     */\r\n    showHelpOnError: true,\r\n  };\r\n\r\n  /**\r\n   * Helper function to get console logger based on debug option\r\n   * @returns\r\n   */\r\n  private getLog() {\r\n    if (this.options.debug) {\r\n      return console.log;\r\n    }\r\n    return () => {};\r\n  }\r\n\r\n  /**\r\n   * Returns a successful result\r\n   * @param result The result to return\r\n   * @returns String or FunctionRunResult based on retrunJSONString option\r\n   */\r\n  private returnSuccess(result: any): string | FunctionRunResult {\r\n    if (this.options.returnJSONString) {\r\n      return JSON.stringify({\r\n        success: true,\r\n        result,\r\n      });\r\n    }\r\n    return result + \"\";\r\n  }\r\n  /**\r\n   * Returns an error result\r\n   * @param message The error message to return\r\n   * @returns String or FunctionRunResult based on retrunJSONString option\r\n   */\r\n  private returnError(message: string): string | FunctionRunResult {\r\n    if (this.options.returnJSONString) {\r\n      return JSON.stringify({\r\n        success: false,\r\n        message,\r\n      });\r\n    }\r\n    return message + \"\";\r\n  }\r\n\r\n  /**\r\n   * @param options FunctionRunnerOptions object  to override default options\r\n   */\r\n  constructor(options?: FunctionRunnerOptions) {\r\n    if (options != undefined) {\r\n      this.options = { ...this.options, ...options };\r\n    }\r\n  }\r\n\r\n  //Contains all registered functions\r\n  private functions: {\r\n    [name: string]: { description: string; func: InvokableFunction };\r\n  } = {};\r\n\r\n  /**\r\n   * Registers a function\r\n   * @param name The function name (must be unique)\r\n   * @param description The function description to show in help\r\n   * @param func The function to run\r\n   */\r\n  public registerFunction(name: string, description: string, func: Function) {\r\n    this.functions[name] = {\r\n      description: description,\r\n      func: new InvokableFunction(func, this.getLog()),\r\n    };\r\n    return this.functions[name].func;\r\n  }\r\n\r\n  /**\r\n   * Returns a function with a parameter schema\r\n   * @param name The function name\r\n   * @param description The function description to show in help\r\n   * @param func The function to run\r\n   * @param schema The function parameter schema\r\n   * @returns\r\n   */\r\n  public registerFunctionWithSchema(\r\n    name: string,\r\n    description: string,\r\n    func: Function,\r\n    schema: FunctionField[]\r\n  ) {\r\n    this.functions[name] = {\r\n      description: description,\r\n      func: new InvokableFunction(func, this.getLog()),\r\n    };\r\n    schema.forEach((field) => {\r\n      this.functions[name].func.addFunctionField(field);\r\n    });\r\n    return this.functions[name];\r\n  }\r\n\r\n  /**\r\n   * Returns help for a function\r\n   * @param name The function name\r\n   * @returns string\r\n   */\r\n  public getFunctionHelp(name: string): string {\r\n    if (this.functions[name] === undefined) {\r\n      return `Function ${name} not found`;\r\n    }\r\n    let out = `Function ${name}:\\n`;\r\n    let fields = this.functions[name].func.getFields();\r\n    fields.forEach((field) => {\r\n      out += `    ${field.getName()} (${field.getType()})\\t${field.getDescription()}\\n`;\r\n    });\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns help for all functions\r\n   * @returns String\r\n   */\r\n  public getHelp(): string {\r\n    let out = \"Syntax: <functionName> <arg1> <arg2> ... <argN>\\n\";\r\n    out += \"Functions:\\n\";\r\n    for (let key in this.functions) {\r\n      out += `- ${key} \\t${this.functions[key].description} \\n`;\r\n      let fields = this.functions[key].func.getFields();\r\n      fields.forEach((field) => {\r\n        out += `\\t${field.getName()} (${field.getType()})\\t ${field.getDescription()}\\n`;\r\n      });\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Shows help for all functions in console\r\n   * @returns\r\n   */\r\n  public showHelp() {\r\n    return console.log(this.getHelp());\r\n  }\r\n\r\n  /**\r\n   * Runs a function with arguments from argv\r\n   * @param argv The arguments array. argv[2] contains the function name and the rest of the array contains the function arguments\r\n   * @returns String or FunctionRunResult based on retrunJSONString option\r\n   */\r\n  public async runArgv(argv: string[]): Promise<string | FunctionRunResult> {\r\n    if (argv.length < 3) {\r\n      return this.returnError(\"No function name provided\");\r\n    }\r\n    let name = argv[2];\r\n    let args = argv.slice(3);\r\n    return this.run(name, args);\r\n  }\r\n\r\n  /**\r\n   * Runs a function from a function object call\r\n   * @param obj The function object call containing the functionName and all function arguements\r\n   * @returns String on FunctionRunResult based on retrunJSONString option\r\n   */\r\n  public async runObj(\r\n    obj: FunctionObjectCall\r\n  ): Promise<string | FunctionRunResult> {\r\n    if (obj.functionName === undefined) {\r\n      return this.returnError(\"No functionName provided\");\r\n    }\r\n    if (this.functions[obj.functionName] === undefined) {\r\n      const notFoundLabel = `Function ${obj.functionName} not found ${\r\n        this.options.showHelpOnError ? \"\\n\\n\" + this.getHelp() : \"\"\r\n      }`;\r\n      return this.returnError(notFoundLabel);\r\n    }\r\n    const fields = this.functions[obj.functionName].func.getFields();\r\n    const argArray = [];\r\n    fields.forEach((field) => {\r\n      argArray.push(obj[field.getName()]);\r\n    });\r\n    return await this.run(obj.functionName, argArray);\r\n  }\r\n\r\n  /**\r\n   * Runs a function\r\n   * @param name The function name\r\n   * @param args The function arguments\r\n   * @returns String on FunctionRunResult based on retrunJSONString option\r\n   */\r\n  public async run(\r\n    name: string,\r\n    args: any[]\r\n  ): Promise<string | FunctionRunResult> {\r\n    this.getLog()(`Â» ${name} ${JSON.stringify(args)}`);\r\n\r\n    if (this.functions[name] === undefined) {\r\n      const notFoundLabel = `Function ${name} not found ${\r\n        this.options.showHelpOnError ? \"\\n\\n\" + this.getHelp() : \"\"\r\n      }`;\r\n      return this.returnError(notFoundLabel);\r\n    }\r\n    let result;\r\n    try {\r\n      result = await this.functions[name].func.run(args);\r\n    } catch (e) {\r\n      const errorLabel =\r\n        e +\r\n        (this.options.showHelpOnError\r\n          ? \"\\n\\n\" + this.getFunctionHelp(name)\r\n          : \"\");\r\n      return this.returnError(errorLabel);\r\n    }\r\n\r\n    if (result instanceof Uint8Array || result instanceof Object) {\r\n      result = anyUint8ArrayToBase64(result);\r\n    }\r\n    return this.returnSuccess(result);\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}